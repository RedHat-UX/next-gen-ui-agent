# See https://www.pantsbuild.org/stable/docs/using-pants/using-pants-in-ci for tips on how to set up your CI with Pants.

name: Pants

on:
  push:
    branches:
    - 'main'
  pull_request:

jobs:
  build:
    name: Perform CI Checks
    runs-on: ubuntu-24.04
    strategy:
      matrix:
        python-version: 
        - 3.12
        - 3.13
    steps:
    - uses: actions/checkout@v4
    - uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'        # Cache pip deps (not used by pants, but other jobs)
        cache-dependency-path: |
            tests/distribution-all/install_deps.sh
    - uses: pantsbuild/actions/init-pants@v8
      # This action bootstraps pants and manages 2-3 GHA caches.
      # See: github.com/pantsbuild/actions/tree/main/init-pants/
      with:
        # v0 makes it easy to bust the cache if needed
        # just increase the integer to start with a fresh cache
        gha-cache-key: cache2-py${{ matrix.python-version }}
        # The Python backend uses named_caches for Pip/PEX state,
        # so it is appropriate to invalidate on lockfile changes.
        named-caches-hash: ${{ hashFiles('python-default.lock', 'libs/3rdparty/python/*.lock') }}
        # If you're not using a fine-grained remote caching service (see https://www.pantsbuild.org/docs/remote-caching),
        # then you may also want to preserve the local Pants cache (lmdb_store). However this must invalidate for
        # changes to any file that can affect the build, so may not be practical in larger repos.
        # A remote cache service integrates with Pants's fine-grained invalidation and avoids these problems.
        cache-lmdb-store: 'true'  # defaults to 'false'
        # Note that named_caches and lmdb_store falls back to partial restore keys which
        # may give a useful partial result that will save time over completely clean state,
        # but will cause the cache entry to grow without bound over time.
        # See https://www.pantsbuild.org/stable/docs/using-pants/using-pants-in-ci for tips on how to periodically clean it up.
        # Alternatively you change gha-cache-key to ignore old caches.
    - name: Check BUILD files
      run: |
        pants tailor --check update-build-files --check ::
    - name: Lint and typecheck
      run: |
        pants lint check ::
    - name: Test
      run: |
        pants test ::
    - name: Publish Test Report
      uses: mikepenz/action-junit-report@v5
      if: success() || failure() # always run even if the previous step fails
      with:
        check_name: 'JUnit Test Report (${{ matrix.python-version }})'
        report_paths: 'dist/test/reports/*.xml'
    - name: Package / Run
      run: |
        # We also smoke test that our release process will work by running `package`.
        pants package --filter-target-type=python_distribution ::
    - name: Test / distribution-all
      run: |
        # We also smoke test that our release process will work by running `package`.
        cd tests/distribution-all
        python3 -m venv .venv
        source .venv/bin/activate
        sh install_deps.sh
        # Run pytest
        python -m pytest  .
    - name: Upload pants log
      uses: actions/upload-artifact@v4
      with:
        name: pants-log-py-${{ matrix.python-version }}
        path: .pants.d/workdir/pants.log
      if: always()  # We want the log even on failures.
  # Bump version, build and upload artifacts
  bump_version:
    if: ${{!contains(github.ref, 'main')}}
    needs:
      - build
    runs-on: ubuntu-latest
    name: "Bump version and build"
    steps:
      - name: Check out
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - uses: actions/setup-python@v5
        with:
          python-version: '3.12'
          cache: 'pip'
          cache-dependency-path: |
              requirements_dev.txt
      - id: cz
        name: Bump
        uses: commitizen-tools/commitizen-action@master
        with:
          push: "false"
          commit: "false"
          prerelease: "beta"
          extra_requirements: "cz_github_jira_conventional"
          increment: "PATCH"
          commitizen_version: "4.6.3"
      - name: Print Version
        run: echo "Bumped to version ${{ steps.cz.outputs.version }}"
      - uses: pantsbuild/actions/init-pants@v8
        with:
          gha-cache-key: v0
          named-caches-hash: ${{ hashFiles('python-default.lock') }}
          cache-lmdb-store: 'true'  # defaults to 'false'
      - name: Package / Run
        env:
          VERSION: ${{ steps.cz.outputs.version }}
        run: |
          echo $VERSION
          pants package ::
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: CHANGELOG.md
      - name: Upload build
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          path: dist/
  # Publish image
  publish_image:
    if: ${{!contains(github.ref, 'main')}}
    needs:
      - build
    runs-on: ubuntu-latest
    name: "Publish Image"
    steps:
      - name: Push image to quay.io
        id: push-to-quay
        uses: redhat-actions/push-to-registry@v2
        with:
            image: next-gen-ui/mcp
            tags: dev
            registry: quay.io
            username: ${{ secrets.QUAY_USERNAME }}
            password: ${{ secrets.QUAY_TOKEN }}
      - name: push README to quay.io
        uses: christian-korneck/update-container-description-action@v1
        env:
          DOCKER_APIKEY: ${{ secrets.QUAY_TOKEN }}
        with:
          destination_container_repo: quay.io/next-gen-ui/mcp
          provider: quay
          short_description: 'Next Gen UI MCP Server'
          readme_file: 'README-containers.md'
  # Publish to test PyPI
  publish_test:
    name: "Publish to test PyPI"
    if: ${{!contains(github.ref, 'main')}}
    needs:
      - bump_version
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: distribution
          path: dist/
      - uses: actions/setup-python@v5
        with:
          python-version: 3.12
          cache: 'pip'
          cache-dependency-path: |
              requirements_dev.txt
      - name: Publish to Test PyPI
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_TOKEN_TEST }}
        run: |
          python3 -m pip install twine
          python3 -m twine upload --repository testpypi  --skip-existing  --disable-progress-bar --verbose dist/next_gen_ui*.whl
